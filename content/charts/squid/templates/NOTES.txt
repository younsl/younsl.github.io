====================================================================
Chart Version: {{ .Chart.Version }}
App Version:   {{ .Chart.AppVersion | default .Values.image.tag }}
Image:         {{ .Values.image.repository }}:{{ .Values.image.tag }}
Config docs:   https://www.squid-cache.org/Versions/v6/cfgman/
====================================================================
Squid Proxy has been deployed successfully!

1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "squid.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "squid.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "squid.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "squid.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:{{ .Values.service.targetPort }} to use your squid proxy"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME {{ .Values.service.targetPort }}:$CONTAINER_PORT
{{- end }}

2. Test the squid proxy:
   # Set proxy environment variables
   export http_proxy=http://127.0.0.1:{{ .Values.service.targetPort }}
   export https_proxy=http://127.0.0.1:{{ .Values.service.targetPort }}
   
   # Test with curl
   curl -v https://www.google.com
   curl -v https://slack.com

3. Configure applications to use the proxy:
   Service URL: {{ include "squid.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }} 

{{- if .Values.squidExporter.enabled }}

4. Prometheus metrics (collected by squid-exporter sidecar) are available at:
   Metrics URL: {{ include "squid.fullname" . }}-metrics.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.squidExporter.port }}{{ .Values.squidExporter.metricsPath }}
   
   The squid-exporter sidecar container collects metrics from squid cache manager
   and exposes them in Prometheus format on a separate ClusterIP service
   
   # Test metrics endpoint
   kubectl port-forward svc/{{ include "squid.fullname" . }}-metrics {{ .Values.squidExporter.port }}:{{ .Values.squidExporter.port }}
   curl http://localhost:{{ .Values.squidExporter.port }}{{ .Values.squidExporter.metricsPath }}
{{- end }}